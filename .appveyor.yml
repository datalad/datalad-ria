# This CI setup provides a largely homogeneous configuration across all
# major platforms (Windows, MacOS, and Linux). The aim of this test setup is
# to create a "native" platform experience, using as few cross-platform
# helper tools as possible.
#
# On Linux/Mac a venv is used for testing. The effective venv
# is available under ~/VENV.
#
# All workers support remote login. Login details are shown at the top of each
# CI run log.
#
# - Linux/Mac workers (via SSH):
#
#   - A permitted SSH key must be defined in an APPVEYOR_SSH_KEY environment
#     variable (via the appveyor project settings)
#
#   - SSH login info is given in the form of: 'appveyor@67.225.164.xx -p 22xxx'
#
#   - Login with:
#
#     ssh -o StrictHostKeyChecking=no <LOGIN>
#
#   - to prevent the CI run from exiting, `touch` a file named `BLOCK` in the
#     user HOME directory (current directory directly after login). The session
#     will run until the file is removed (or 60 min have passed)
#
# - Windows workers (via RDP):
#
#   - An RDP password should be defined in an APPVEYOR_RDP_PASSWORD environment
#     variable (via the appveyor project settings), or a random password is used
#     every time
#
#   - RDP login info is given in the form of IP:PORT
#
#   - Login with:
#
#     xfreerdp /cert:ignore /dynamic-resolution /u:appveyor /p:<PASSWORD> /v:<LOGIN>
#
#   - to prevent the CI run from exiting, create a textfile named `BLOCK` on the
#     Desktop (a required .txt extension will be added automatically). The session
#     will run until the file is removed (or 60 min have passed)
#
#   - in a terminal execute, for example, `C:\datalad_debug.bat 39` to set up the
#     environment to debug in a Python 3.8 session (should generally match the
#     respective CI run configuration).


# do not make repository clone cheap: interfers with versioneer
shallow_clone: false

# turn of support for MS project build support (not needed)
build: off

environment:
  DATALAD_TESTS_SSH: 1
  DTS: datalad_ria
  DATALAD_TESTS_DOCKER_SSHD_SECKEY_DOWNLOADURL: https://ci.appveyor.com/api/projects/mih/datalad-ci-docker-containers/artifacts/recipes/sshd/id_rsa?job=sshd
  DATALAD_TESTS_DOCKER_SSHD_DOWNLOADURL: https://ci.appveyor.com/api/projects/mih/datalad-ci-docker-containers/artifacts/sshd.dockerimg.gz?job=sshd
  DATALAD_TESTS_DOCKER_SSHD_CONTAINER_NAME: ria-sshd

  matrix:
    - job_name: test-linux
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      # system git-annex is way too old, use better one
      INSTALL_GITANNEX: git-annex -m snapshot
      CODECOV_BINARY: https://uploader.codecov.io/latest/linux/codecov
      PY: 3.8
      DATALAD_TESTS_RIA_SERVER_SSH_HOST: datalad-test-ria
      DATALAD_TESTS_RIA_SERVER_SSH_PORT: 2222
      DATALAD_TESTS_RIA_SERVER_SSH_LOGIN: sshuser
      DATALAD_TESTS_RIA_SERVER_SSH_SECKEY: /home/appveyor/.ssh/datalad_tests_id_rsa
      DATALAD_TESTS_RIA_SERVER_SSH_PATH: /usr/local/apache2/htdocs
      DATALAD_TESTS_RIA_SERVER_LOCALPATH: /home/appveyor/DLTMP/riaroot

    # same as 'test-linux', but TMPDIR is on a crippled filesystem, causing
    # most, if not all test datasets to be created on that filesystem
    - job_name: test-linux-crippled
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      # system git-annex is way too old, use better one
      INSTALL_GITANNEX: git-annex -m snapshot
      CODECOV_BINARY: https://uploader.codecov.io/latest/linux/codecov
      PY: 3.8
      DATALAD_TESTS_RIA_SERVER_SSH_HOST: datalad-test-ria
      DATALAD_TESTS_RIA_SERVER_SSH_PORT: 2222
      DATALAD_TESTS_RIA_SERVER_SSH_LOGIN: sshuser
      DATALAD_TESTS_RIA_SERVER_SSH_SECKEY: /home/appveyor/.ssh/datalad_tests_id_rsa
      DATALAD_TESTS_RIA_SERVER_SSH_PATH: /usr/local/apache2/htdocs
      DATALAD_TESTS_RIA_SERVER_LOCALPATH: /home/appveyor/DLTMP/riaroot

    - job_name: test-win
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      # Python version specification is non-standard on windows
      PY: 39-x64
      INSTALL_GITANNEX: git-annex -m datalad/packages
      DATALAD_TESTS_RIA_SERVER_SSH_HOST: datalad-test-ria
      DATALAD_TESTS_RIA_SERVER_SSH_PORT: 2222
      DATALAD_TESTS_RIA_SERVER_SSH_LOGIN: sshuser
      DATALAD_TESTS_RIA_SERVER_SSH_SECKEY: C:\DLTMP\datalad_tests_id_rsa
      DATALAD_TESTS_RIA_SERVER_SSH_PATH: /usr/local/apache2/htdocs
      DATALAD_TESTS_RIA_SERVER_LOCALPATH: C:\DLTMP\riaroot

    - job_name: test-mac
      APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
      PY: 3.8
      INSTALL_GITANNEX: git-annex
      DATALAD_LOCATIONS_SOCKETS: /Users/appveyor/DLTMP/sockets
      CODECOV_BINARY: https://uploader.codecov.io/latest/macos/codecov
      DATALAD_TESTS_RIA_SERVER_SSH_HOST: localhost
      DATALAD_TESTS_RIA_SERVER_SSH_PORT: 22
      DATALAD_TESTS_RIA_SERVER_SSH_LOGIN: appveyor
      DATALAD_TESTS_RIA_SERVER_SSH_SECKEY: /Users/appveyor/.ssh/datalad_tests_id_rsa
      DATALAD_TESTS_RIA_SERVER_SSH_PATH: /Users/appveyor/DLTMP/riaroot
      DATALAD_TESTS_RIA_SERVER_LOCALPATH: /Users/appveyor/DLTMP/riaroot


# do not run the CI if only documentation changes were made
# documentation builds are tested elsewhere and cheaper
skip_commits:
  files:
    - docs/
    - .github/
    - changelog.d/
    - .datalad-release-action.yaml
    - readthedocs.yml
    - zenodo.json
    - '*.md'
    - CONTRIBUTING.md
    - CONTRIBUTORS


# tests need specific hostnames to be available
# note, this is insufficient on MacOS, and needs to be reflected
# in the SSH config too
hosts:
  datalad-test-ria: 127.0.0.1


# job-specific configurations
for:
  #
  # POSIX TEST RUNS
  #
  - matrix:
      only:
        - job_name: test-linux
        - job_name: test-linux-crippled
        - job_name: test-mac

    cache:
      # pip cache
      - /home/appveyor/.cache/pip -> .appveyor.yml

    init:
      # needs APPVEYOR_SSH_KEY defined in project settings (or environment)
      - curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -
      # Scratch space, placed into the user's HOME to avoid git-annex issues on MacOSX
      # gh-5291
      - mkdir ~/DLTMP && export TMPDIR=~/DLTMP
      # establish a root directory for RIA tests
      - "mkdir ${DATALAD_TESTS_RIA_SERVER_LOCALPATH}"

    install:
      # verify that a PY variable is declared that identifies the desired Python version
      # for this run
      - "[ \"x$PY\" != x ]"
      # Use env setup (using the appveyor provided environments/installation) for the
      # particular Python version requested.
      - ". ${HOME}/venv${PY}/bin/activate; ln -s \"$VIRTUAL_ENV\" \"${HOME}/VENV\""
      # deploy the datalad installer, override version via DATALAD_INSTALLER_VERSION
      - python -m pip install datalad-installer${DATALAD_INSTALLER_VERSION:-}
      # install git-annex, INSTALL_SYSPKGS can also be used deploy git-annex, if desired
      #- "[ -n \"${INSTALL_GITANNEX}\" ] && datalad-installer --sudo ok ${INSTALL_GITANNEX}"
      # in case of a snapshot installation, use the following approach to adjust
      # the PATH as necessary
      - "[ -n \"${INSTALL_GITANNEX}\" ] && datalad-installer -E ${HOME}/dlinstaller_env.sh --sudo ok ${INSTALL_GITANNEX} || true"
      # add location of datalad installer results to PATH
      - "[ -f ${HOME}/dlinstaller_env.sh ] && . ${HOME}/dlinstaller_env.sh || true"
      - tools/ci/install-syspkgs $INSTALL_SYSPKGS

    before_test:
      - tools/ci/setup-sshd
      - tools/ci/verify-ssh-access

    test_script:
      # store original TMPDIR setting to limit modification to test execution
      - export PREV_TMPDIR=$TMPDIR
      # make TMPDIR a "crippled filesystem" to test wrong assumptions of POSIX-ness
      # on POSIX OSes. The test fixtures will create all test datasets under TMPDIR
      - |
        set -e
        if [ "$APPVEYOR_JOB_NAME" = "test-linux-crippled" ]; then
          # 500 MB VFAT FS in a box
          sudo dd if=/dev/zero of=/crippledfs.img count=500 bs=1M
          sudo mkfs.vfat /crippledfs.img
          sudo mkdir /crippledfs
          sudo mount -o "uid=$(id -u),gid=$(id -g)" /crippledfs.img /crippledfs
          echo "== mount >>"
          mount | grep crippled
          echo "<< mount =="
          export TMPDIR=/crippledfs
        fi
      - echo TMPDIR=$TMPDIR
      # run tests on installed module, not source tree files
      - mkdir __testhome__
      - cd __testhome__
      - python -m pytest -s -v -m "not (turtle)" --doctest-modules --cov=datalad_ria --pyargs ${DTS}
      # restiore original TMPDIR
      - export TMPDIR=$PREV_TMPDIR

    after_test:
      - python -m coverage xml
      - "curl -Os $CODECOV_BINARY"
      - chmod +x codecov
      - ./codecov

    on_finish:
      # conditionally block the exit of a CI run for direct debugging
      - while [ -f ~/BLOCK ]; do sleep 5; done


  #
  # WINDOWS TEST RUNS
  #
  - matrix:
      only:
        - job_name: test-win
    cache:
      # pip cache
      - C:\Users\appveyor\AppData\Local\pip\Cache -> .appveyor.yml
    # init cannot use any components from the repo, because it runs prior to
    # cloning it
    init:
      # remove 260-char limit on path names
      - cmd: powershell Set-Itemproperty -path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name LongPathsEnabled -value 1
      # enable developer mode
      # this should enable mklink without admin privileges, but it doesn't seem to work
      #- cmd: powershell tools\ci\appveyor_enable_windevmode.ps1
      # enable RDP access (RDP password is in appveyor project config)
      # this is relatively expensive (1-2min), but very convenient to jump into any build at any time
      - cmd: powershell.exe iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
      # Scratch space
      - cmd: md C:\DLTMP
      # and use that scratch space to get short paths in test repos
      # (avoiding length-limits as much as possible)
      - cmd: "set TMP=C:\\DLTMP"
      - cmd: "set TEMP=C:\\DLTMP"
      # establish a root directory for RIA tests
      - cmd: md C:\DLTMP\riaroot

    install:
      - cmd: copy tools\ci\appveyor_env_setup.bat C:\\datalad_debug.bat
      - cmd: "set PATH=C:\\Python%PY%;C:\\Python%PY%\\Scripts;%PATH%"
      # deploy the datalad installer, override version via DATALAD_INSTALLER_VERSION
      - cmd:
          IF DEFINED DATALAD_INSTALLER_VERSION (
          python -m pip install "datalad-installer%DATALAD_INSTALLER_VERSION%"
          ) ELSE (
          python -m pip install datalad-installer
          )
      # install git-annex
      - cmd: IF DEFINED INSTALL_GITANNEX datalad-installer --sudo ok %INSTALL_GITANNEX%

    before_test:
      - tools\ci\setup-sshd
      - tools\ci\verify-ssh-access

    test_script:
      # run tests on installed module, not source tree files
      - cmd: md __testhome__
      - cmd: cd __testhome__
      - cmd: python -m pytest -s -v -m "not (turtle)" --doctest-modules --cov=datalad_ria --pyargs %DTS%

    after_test:
      - python -m coverage xml
      - cmd: curl -fsSL -o codecov.exe "https://uploader.codecov.io/latest/windows/codecov.exe"
      - cmd: .\codecov.exe -f "coverage.xml"

    on_finish:
      # conditionally block the exit of a CI run for direct debugging
      - cmd: powershell.exe while ((Test-Path "C:\Users\\appveyor\\Desktop\\BLOCK.txt")) { Start-Sleep 5 }


#
# ALL TEST RUNS
#
build_script:
  - python -m pip install -r requirements-devel.txt
  - python -m pip install .

after_build:
  # Identity setup
  - git config --global user.email "test@appveyor.land"
  - git config --global user.name "Appveyor Almighty"
  # simple call to see if datalad and git-annex are installed properly
  - datalad wtf

#on_success:
#

#on_failure:
#
